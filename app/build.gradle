group 'net.evendanan'

buildscript {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://jitpack.io' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.1'
        classpath 'com.github.menny:GradleVersion:0.0.3'
    }
}


if(project.hasProperty("kasahorow.signing.config") && new File(project.property("kasahorow.signing.config")).exists()) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(file(project.property("kasahorow.signing.config"))))

    android {
        packagingOptions {
            exclude 'LICENSE.txt'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE'
        }

        compileSdkVersion rootProject.ext.sdkCompileVersion
        buildToolsVersion rootProject.ext.androidBuildTools

        defaultConfig {

            def version_code = 10325

            applicationId 'com.kasahorow.android.keyboard.app'
            versionCode version_code
            versionName project.version

            println "Building kasahorow " + version + ", version-code " + version_code

            minSdkVersion sdkMinimumVersion
            targetSdkVersion sdkTargetVersion
            //adding additional fields to the BuildConfig class.

            def String support_email_address = properties["CRASH_REPORT_EMAIL_ADDRESS"]
            println 'crash report email is: ' + support_email_address

            buildConfigField "String", "CRASH_REPORT_EMAIL_ADDRESS", '"' + support_email_address + '"'

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        signingConfigs {
            release {
                storeFile = file(properties['STORE_FILE'])
                storePassword = properties['STORE_PASSWORD']
                keyAlias = properties['KEY_ALIAS']
                keyPassword = properties['KEY_PASSWORD']
                println "Using 'kasahorow.keystore' to release APK (with alias '${keyAlias}')."

            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
                zipAlignEnabled true
                debuggable false

                minifyEnabled true
                proguardFiles 'proguard-android-optimize.txt', 'proguard-rules.txt'

                ext.enableCrashlytics = false

                matchingFallbacks = ['release', 'debug']
            }
        }
        lintOptions {
            lintConfig file("${projectDir}/lint/lint.xml")
        }

    }


    apply from: "${rootDir}/gradle/android_unit_test.gradle"

    play {
        track = System.getProperty('deployChannel', 'alpha')
        serviceAccountEmail = System.getenv('PUBLISH_APK_SERVICE_ACCOUNT_EMAIL')
        pk12File = file('/tmp/apk_upload_key.p12')
        uploadImages = false
    }

    //verifying whatsnew file
    File playStoreWhatsNewFile = file("${project.projectDir}/src/main/play/en-US/whatsnew")
    if (!playStoreWhatsNewFile.exists()) {
        throw new FileNotFoundException("Can not find whatsnew file for Play-Store upload!")
    }

    if (playStoreWhatsNewFile.text.length() > 500) {
        println("Locale " + Locale.getDefault())
        println("file encoding " + CharsetToolkit.defaultSystemCharset)
        throw new IllegalStateException("whatsnew file can not be longer than 500 characters! Currently " + playStoreWhatsNewFile.text.length())
    }

    dependencies {
        implementation project(':base')
        implementation project(':base-rx')
        implementation project(':nextword')
        implementation project(':dictionaries')
        implementation project(':jnidictionaryv1')
        implementation project(':jnidictionaryv2')
        implementation project(':prefs')

        implementation "com.github.AnySoftKeyboard:AnySoftKeyboard-API:$AnySoftKeyboardApiVersion"
        implementation "com.android.support:support-fragment:$supportLibVersion"
        implementation "com.android.support:appcompat-v7:$supportLibVersion"
        implementation "com.android.support:recyclerview-v7:$supportLibVersion"
        implementation "com.android.support:support-annotations:$supportLibVersion"
        implementation "com.android.support:palette-v7:$supportLibVersion"
        implementation "com.android.support:preference-v7:$supportLibVersion"
        implementation "com.android.support:design:$supportLibVersion"
        implementation 'com.jpardogo.materialtabstrip:library:1.1.0'
        implementation('com.github.menny.Chauffeur:permissions:0.1.1') {
            exclude group: 'com.android.support'
        }

        testImplementation project(path: ':base-test')

        testImplementation 'com.github.triplet.simpleprovider:simpleprovider:1.1.0'

        canaryImplementation project(path: ':crashlytics')


        crashlytics {
            enableNdk true
            androidNdkOut "${rootDir.absolutePath}/jnidictionaryv2/build/intermediates/ndkBuild/release/obj/local/"
            androidNdkLibsOut "${rootDir.absolutePath}/app/build/intermediates/transforms/mergeJniLibs/canary/0/lib/"
            manifestPath = "${projectDir.absolutePath}/build/intermediates/manifests/full/canary/AndroidManifest.xml"
        }
    }

}
